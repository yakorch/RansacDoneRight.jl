### A Pluto.jl notebook ###
# v0.19.30

using Markdown
using InteractiveUtils

# This Pluto notebook uses @bind for interactivity. When running this notebook outside of Pluto, the following 'mock version' of @bind gives bound variables a default value (instead of an error).
macro bind(def, element)
    quote
        local iv = try Base.loaded_modules[Base.PkgId(Base.UUID("6e696c72-6542-2067-7265-42206c756150"), "AbstractPlutoDingetjes")].Bonds.initial_value catch; b -> missing; end
        local el = $(esc(element))
        global $(esc(def)) = Core.applicable(Base.get, el) ? Base.get(el) : iv(el)
        el
    end
end

# ╔═╡ d241e306-317b-497f-a74d-d01f9d2d1261
begin
    using Pkg
	NOTEBOOKS_PATH = "src/pluto_notebooks"
	DATA_PATH = "data"  # store generated by notebook data
    @assert endswith(pwd(), NOTEBOOKS_PATH) "Wrong directory!"
	RDR_PATH = "../.."  # path to the RDR project root
    Pkg.activate(RDR_PATH)
	Pkg.instantiate()
	
	import RansacDoneRight as RDR
    md"""
    ### Activating RansacDoneRight environment...
    """
end

# ╔═╡ fa39f882-5606-44d7-affe-9a6688058b99
begin
	using Distributions
	using LinearAlgebra
	using PlutoUI
	using StaticArrays
end

# ╔═╡ db351afc-bea6-11ee-2dd6-615af85c2d55
html"""
<style>
	main {
		margin: 0 auto;
		max-width: 2000px;
		padding-left: max(160px, 15%);
		padding-right: max(160px, 15%);
	}
</style>
"""

# ╔═╡ 4759c8f1-671b-47f1-a779-80a116af3935
begin
	conf_level_slider = @bind α confirm(Slider(0.01:0.01:0.99, 0.05, true))
	md"""
	### $\alpha$: $(conf_level_slider)
	"""
end

# ╔═╡ 5747ae5f-a4ff-421d-b293-d290cba04679
md"""
##### By the definition of the test size: $\alpha$ is the probability that the null hypothesis will be rejected given it actually is true.

##### In our case $H_0 : \mu_{x_1 \cdot (x_2 \times x_3)} = 0$ (meaning the points are collinear.)
"""

# ╔═╡ 9fa18105-0fbd-47a4-935a-b07c12c73d65
"""
Runs the simulations `n_runs` times.

`α` is the desired significance level.


Adds the white noise to the points as specified by their covariance matrices ``\\Sigma_{p_i}``.

Returns the empirical significance level.
"""
function run_incidence_simulations(p₁::RDR.UncertainPoint, p₂::RDR.UncertainPoint, p₃::RDR.UncertainPoint, α, n_runs::Integer)::Float64
	χ²_statistic = quantile(Chisq(1), 1 - α)

	noise_generator_1 = MvNormal([0, 0], p₁.covariance_matrix[1:2, 1:2])
    noise_generator_2 = MvNormal([0, 0], p₂.covariance_matrix[1:2, 1:2])
	noise_generator_3 = MvNormal([0, 0], p₃.covariance_matrix[1:2, 1:2])

	rejected = 0

	for i in 1:n_runs
		
		noised_p₁ = RDR.UncertainPoint(p₁.point_coords + [rand(noise_generator_1)..., 0], p₁.covariance_matrix)
		noised_p₂ = RDR.UncertainPoint(p₂.point_coords + [rand(noise_generator_2)..., 0], p₂.covariance_matrix)
		noised_p₃ = RDR.UncertainPoint(p₃.point_coords + [rand(noise_generator_3)..., 0], p₃.covariance_matrix)

		
		RDR.normalize_the_point!(noised_p₁)
		RDR.normalize_the_point!(noised_p₂)
		RDR.normalize_the_point!(noised_p₃)
		
		l = RDR.find_uncertain_line_from_two_points(noised_p₂, noised_p₃)
		
		# RDR.normalize_the_line!(l)

		T = RDR.compute_point_line_incidence_statistic(noised_p₁, l)
		rejected += (T > χ²_statistic)
	end

	rejected / n_runs
end

# ╔═╡ 779046bc-d1ae-42ca-8c05-2c8a22821fa9
begin
	md"""
	### Running the simulations...
	"""
end

# ╔═╡ 73e8b2e9-b9b0-495e-861a-296e063af16a
begin
	p₁ = RDR.UncertainPoint(
		MVector(6., 10., 1.),
		1. * [2 0 0;
			0 1 0;
			0 0 0
		]
	)

	p₂ = RDR.UncertainPoint(
		MVector(15., 27., 1.),
		1. * [1 -0.5 0;
			-0.5 2.5 0;
			0 0 0
			]
	)

	p₃ = RDR.UncertainPoint(
		MVector(11.2941, 20., 1.),
		1. * [3 0.9 0;
			0.9 1.5 0;
			0 0 0
			]
	)

	run_incidence_simulations(p₁, p₂, p₃, α, 1_500_000)
end

# ╔═╡ Cell order:
# ╟─db351afc-bea6-11ee-2dd6-615af85c2d55
# ╟─d241e306-317b-497f-a74d-d01f9d2d1261
# ╠═fa39f882-5606-44d7-affe-9a6688058b99
# ╟─4759c8f1-671b-47f1-a779-80a116af3935
# ╟─5747ae5f-a4ff-421d-b293-d290cba04679
# ╠═9fa18105-0fbd-47a4-935a-b07c12c73d65
# ╟─779046bc-d1ae-42ca-8c05-2c8a22821fa9
# ╠═73e8b2e9-b9b0-495e-861a-296e063af16a

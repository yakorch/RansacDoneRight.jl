### A Pluto.jl notebook ###
# v0.19.40

using Markdown
using InteractiveUtils

# ╔═╡ 38be9400-d95f-11ee-2ca9-af36125c7cfb
begin
    using Pkg
    NOTEBOOKS_PATH = "src/pluto_notebooks"
    DATA_PATH = "data"  # store generated by notebook data
    @assert endswith(pwd(), NOTEBOOKS_PATH) "Wrong directory!"
    RDR_PATH = "../../.."  # path to the RDR project root
    Pkg.activate(RDR_PATH)

    import RansacDoneRight as RDR
    md"""
    ### Activating RansacDoneRight environment...
    """
end

# ╔═╡ 797c92ef-7de8-42d9-b266-f80952c100dd
begin
	using Revise
	using LinearAlgebra
	using StaticArrays
	using Plots

	md"""
	### Package Imports 
	"""
end

# ╔═╡ 832e3143-5d0b-48b8-9ed8-5be29383b531
html"""
    <style>
    	main {
    		margin: 0 auto;
    		max-width: 2000px;
        	padding-left: max(160px, 15%);
        	padding-right: max(160px, 15%);
    	}
    </style>
"""

# ╔═╡ 6a147350-d1d2-4dc1-bf6c-0702562124bf
md"""
# All pipeline parts examples
"""

# ╔═╡ 530f1276-5e46-41d7-8ce7-538753954e81
md"""
## Generating random scene
"""

# ╔═╡ 5e20aaef-11d3-4624-975a-264094bcf14a
begin
	certain_minimal_set = RDR.generate_random_minimal_set()
	H = RDR.compute_homography(certain_minimal_set)
	n_corresps = 25 + 4
	corresps = RDR.generate_k_random_correspondences(n_corresps, H)
end

# ╔═╡ 4cfce8bd-05a3-4b32-9e90-2dd3bf721b45
md"""
### Adding noise to correspondences
"""

# ╔═╡ 61d18fbc-5b51-49a8-8f63-29895a2553e2
begin
	noise_m₁ = 1.5 * I(2)
	noise_m₂ = 1.2 * I(2)
	noised_corresps = RDR.add_noise(corresps, noise_m₁, noise_m₂, true)
end

# ╔═╡ f855c743-169a-473d-b346-d760121be03a
md"""
### Verifying no points are collinear

For more -- read docs.
"""

# ╔═╡ 8a2cd4cb-1dcb-4e1a-b7cf-1454d0f44af4
begin
	minimal_set::MVector{4, RDR.Correspondence{Float64}} = @view noised_corresps[1:4]
	RDR.verify_no_points_are_collinear(
		minimal_set,
		5.99,
		3.84,
		false
	)
end

# ╔═╡ 4674d3a7-1a23-468f-99a8-3ae1ad7e9527
md"""
### Plotting the points
"""

# ╔═╡ 7a9931d6-e90e-45f3-8d53-69ae501e993e
RDR.plot_correspondences(corresps)

# ╔═╡ a256627d-fbf4-446d-a856-53ae751fc3f2
md"""
## Computing uncertain homography from the minimal set
"""

# ╔═╡ 1759b75b-3ac4-4773-a1c7-6be9c79d336a
uncertain_homography = RDR.compute_uncertain_homography(minimal_set)

# ╔═╡ ba04cd31-2173-40ad-8eb8-6bb082371d81
md"""
## Computing uncertain residuals using these methods:

- reprojection residual
- forward (one way) residual
"""

# ╔═╡ 77b446b9-5016-4b8f-99b2-f857e0b075a5
begin
	reprojection_residuals = RDR.compute_uncertain_reprojection_residuals(uncertain_homography, (@view noised_corresps[5:end]))
	forward_residuals = RDR.compute_uncertain_forward_residuals(uncertain_homography, (@view noised_corresps[5:end]))
end

# ╔═╡ cecd7ba2-e6cb-49f4-b308-67c964331a4a
md"""
## Consensus Set Labelling
"""

# ╔═╡ 55d548ac-b7c1-40a6-bb57-df36f7f0ab14
begin
	RDR.compute_inlier_mask(reprojection_residuals, 9.49)
	RDR.compute_inlier_mask(forward_residuals, 5.99)
end

# ╔═╡ Cell order:
# ╟─832e3143-5d0b-48b8-9ed8-5be29383b531
# ╠═38be9400-d95f-11ee-2ca9-af36125c7cfb
# ╠═797c92ef-7de8-42d9-b266-f80952c100dd
# ╟─6a147350-d1d2-4dc1-bf6c-0702562124bf
# ╟─530f1276-5e46-41d7-8ce7-538753954e81
# ╠═5e20aaef-11d3-4624-975a-264094bcf14a
# ╟─4cfce8bd-05a3-4b32-9e90-2dd3bf721b45
# ╠═61d18fbc-5b51-49a8-8f63-29895a2553e2
# ╟─f855c743-169a-473d-b346-d760121be03a
# ╠═8a2cd4cb-1dcb-4e1a-b7cf-1454d0f44af4
# ╟─4674d3a7-1a23-468f-99a8-3ae1ad7e9527
# ╠═7a9931d6-e90e-45f3-8d53-69ae501e993e
# ╟─a256627d-fbf4-446d-a856-53ae751fc3f2
# ╠═1759b75b-3ac4-4773-a1c7-6be9c79d336a
# ╟─ba04cd31-2173-40ad-8eb8-6bb082371d81
# ╠═77b446b9-5016-4b8f-99b2-f857e0b075a5
# ╟─cecd7ba2-e6cb-49f4-b308-67c964331a4a
# ╠═55d548ac-b7c1-40a6-bb57-df36f7f0ab14
